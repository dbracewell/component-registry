{"code":"\n   type Product = {\n      name: string;\n      price: number;\n      quantity: number;\n   };\n   const columns: ColumnDef<Product>[] = [\n      {\n         accessorKey: \"name\",\n         sortable: true,\n         filterFn: \"startsWith\",\n      },\n      {\n         accessorKey: \"price\",\n         sortable: true,\n         cellClassName: \"tabular-nums\",\n         cell: ({ row }) => `$${row.price}`,\n      },\n      {\n         accessorKey: \"quantity\",\n         sortable: true,\n      },\n   ];\n   const { getFilter, setFilter, DataTable } = useDataTable({\n      columns,\n      data: [\n         { name: \"Eggs\", price: 6.99, quantity: 1 },\n         { name: \"Milk\", price: 2.99, quantity: 10 },\n         { name: \"Broccoli\", price: 1.49, quantity: 100 },\n      ],\n      appearance: {\n         container: \"w-[350px]\",\n         headerRow: \"bg-zinc-900\",\n         cellPadding: 5,\n         bodyOddRow: \"bg-zinc-800\",\n         footerRow: \"bg-zinc-900\",\n      },\n      initialSortColumn: \"name\",\n      footerRenderer: (rows) => [\n         {},\n         {\n            className: \"tabular-nums\",\n            node: `$${rows.map((r) => r.price).reduce((a, v) => a + v, 0)}`,\n         },\n         { node: rows.map((r) => r.quantity).reduce((a, v) => a + v, 0) },\n      ],\n   });\n   return (\n      <div>\n         <div className=\"flex flex-col gap-1 justify-self-start w-[350px]\">\n            <span>Name</span>\n            <Input\n               className=\"w-[150px]\"\n               value={getFilter(\"name\") ?? \"\"}\n               onChange={(e) => setFilter(\"name\", e.target.value)}\n            />\n         </div>\n         <DataTable />\n      </div>\n   );"}