{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "form-controls",
  "type": "registry:component",
  "title": "Form Controls",
  "description": "A reusable set of ready made form fields for shadcn form component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "form",
    "input",
    "textarea",
    "select",
    "label",
    "checkbox",
    "calendar",
    "popover",
    "http://localhost:3000/r/number-input.json"
  ],
  "files": [
    {
      "path": "registry/new-york/form-controls/input-form-field.tsx",
      "content": "import { RequiredField } from \"@/registry/new-york/form-controls/required-field\";\nimport {\n   FormControl,\n   FormDescription,\n   FormField,\n   FormItem,\n   FormLabel,\n   FormMessage,\n} from \"@/registry/new-york/ui/form\";\nimport { Input } from \"@/registry/new-york/ui/input\";\nimport React, { ChangeEvent } from \"react\";\nimport { FieldValues, Path, UseFormReturn } from \"react-hook-form\";\n\ntype Props<T extends FieldValues> = Omit<\n   React.ComponentProps<typeof Input>,\n   \"value\" | \"onChange\"\n> & {\n   reactHookForm: UseFormReturn<T>;\n   name: Path<T>;\n   label?: string;\n   emptyToNull?: boolean;\n   formItemClassName?: string;\n   formLabelClassName?: string;\n   formDescriptionClassName?: string;\n   description?: string;\n   onChange?: (value: string | Date | null) => void;\n};\n\nexport const InputFormField = <T extends FieldValues>({\n   reactHookForm,\n   name,\n   label,\n   type,\n   formItemClassName,\n   formLabelClassName,\n   formDescriptionClassName,\n   emptyToNull = false,\n   description,\n   onChange,\n   ...props\n}: Props<T>) => {\n   const handleOnChange = (e: ChangeEvent<HTMLInputElement>) => {\n      switch (type) {\n         case \"text\":\n            const textValue = e.target.value;\n            if (emptyToNull && !textValue.trim()) {\n               return null;\n            }\n            return textValue;\n         case \"date\":\n         case \"datetime-local\":\n         case \"time\":\n            return e.target.valueAsDate;\n      }\n      return e.target.value;\n   };\n\n   return (\n      <FormField\n         name={name}\n         control={reactHookForm.control}\n         render={({ field }) => (\n            <FormItem className={formItemClassName}>\n               {label && (\n                  <FormLabel className={formLabelClassName}>\n                     {label} {props.required && <RequiredField />}\n                  </FormLabel>\n               )}\n               <FormControl>\n                  <Input\n                     {...field}\n                     {...props}\n                     type={type}\n                     value={field.value ?? \"\"}\n                     onChange={(e) => {\n                        const value = handleOnChange(e);\n                        field.onChange(value);\n                        onChange?.(value);\n                     }}\n                  />\n               </FormControl>\n               {description && (\n                  <FormDescription className={formDescriptionClassName}>\n                     {description}\n                  </FormDescription>\n               )}\n               <FormMessage />\n            </FormItem>\n         )}\n      />\n   );\n};\n",
      "type": "registry:component",
      "target": "components/form-controls/input-form-field.tsx"
    },
    {
      "path": "registry/new-york/form-controls/select-form-field.tsx",
      "content": "import {\n   FormControl,\n   FormDescription,\n   FormField,\n   FormItem,\n   FormLabel,\n   FormMessage,\n} from \"@/registry/new-york/ui/form\";\nimport {\n   Select,\n   SelectContent,\n   SelectGroup,\n   SelectItem,\n   SelectLabel,\n   SelectTrigger,\n   SelectValue,\n} from \"@/registry/new-york/ui/select\";\nimport { cn } from \"@/lib/utils\";\nimport { FieldValues, Path, UseFormReturn } from \"react-hook-form\";\nimport { RequiredField } from \"@/registry/new-york/form-controls/required-field\";\n\ntype SelectOption = {\n   label?: string;\n   type: \"group\" | \"item\";\n   className?: string;\n};\n\ntype SelectOptionItem = SelectOption & {\n   type: \"item\";\n   value: string;\n   node?: React.ReactNode;\n};\n\ntype SelectOptionGroup = SelectOption & {\n   type: \"group\";\n   items: SelectOptionItem[];\n};\n\ntype SelectData = SelectOptionItem | SelectOptionGroup;\n\ntype Props<T extends FieldValues> = {\n   reactHookForm: UseFormReturn<T>;\n   name: Path<T>;\n   label?: string;\n   description?: string;\n   selectTriggerClassName?: string;\n   selectContentClassName?: string;\n   formItemClassName?: string;\n   formLabelClassName?: string;\n   formDescriptionClassName?: string;\n   options: SelectData[];\n   nullOption?: SelectOptionItem;\n   placeholder?: string;\n   disabled?: boolean;\n   required?: boolean;\n   onValueChange?: (value: string) => void;\n};\n\nexport const SelectFormField = <T extends FieldValues>({\n   reactHookForm,\n   name,\n   label,\n   description,\n   formItemClassName,\n   formLabelClassName,\n   formDescriptionClassName,\n   selectTriggerClassName,\n   selectContentClassName,\n   nullOption,\n   options,\n   placeholder,\n   onValueChange,\n   disabled = false,\n   required = false,\n}: Props<T>) => {\n   const handleValueChange = (value: string) => {\n      if (nullOption && nullOption.value === value) return null;\n      return value;\n   };\n\n   return (\n      <FormField\n         name={name}\n         control={reactHookForm.control}\n         render={({ field }) => (\n            <FormItem className={formItemClassName}>\n               {label && (\n                  <FormLabel className={formLabelClassName}>\n                     {label} {required && <RequiredField />}\n                  </FormLabel>\n               )}\n               <Select\n                  defaultValue={field.value}\n                  onValueChange={(value) => {\n                     field.onChange(handleValueChange(value));\n                     onValueChange?.(value);\n                  }}\n                  disabled={disabled}\n               >\n                  <FormControl>\n                     <SelectTrigger\n                        className={cn(\"w-full\", selectTriggerClassName)}\n                     >\n                        <SelectValue placeholder={placeholder ?? \"\"} />\n                     </SelectTrigger>\n                  </FormControl>\n                  <SelectContent className={selectContentClassName}>\n                     {nullOption && (\n                        <SelectItem\n                           value={nullOption.value}\n                           className={nullOption.className}\n                        >\n                           {nullOption.node\n                              ? nullOption.node\n                              : nullOption.label\n                              ? nullOption.label\n                              : nullOption.value}\n                        </SelectItem>\n                     )}\n                     {options.map((option, index) => (\n                        <SelectOption key={index} option={option} />\n                     ))}\n                  </SelectContent>\n               </Select>\n               {description && (\n                  <FormDescription className={formDescriptionClassName}>\n                     {description}\n                  </FormDescription>\n               )}\n               <FormMessage />\n            </FormItem>\n         )}\n      />\n   );\n};\n\nconst SelectOption = ({ option }: { option: SelectData }) => {\n   if (option.type === \"item\") {\n      return (\n         <SelectItem value={option.value} className={option.className}>\n            {option.node\n               ? option.node\n               : option.label\n               ? option.label\n               : option.value}\n         </SelectItem>\n      );\n   }\n\n   return (\n      <SelectGroup className={option.className}>\n         {option.label && <SelectLabel>{option.label}</SelectLabel>}\n         {option.items.map((child) => (\n            <SelectOption key={child.value} option={child} />\n         ))}\n      </SelectGroup>\n   );\n};\n",
      "type": "registry:component",
      "target": "components/form-controls/select-form-field.tsx"
    },
    {
      "path": "registry/new-york/form-controls/date-picker-form-field.tsx",
      "content": "import {\n   FormControl,\n   FormDescription,\n   FormField,\n   FormItem,\n   FormLabel,\n   FormMessage,\n} from \"@/registry/new-york/ui/form\";\nimport {\n   Popover,\n   PopoverContent,\n   PopoverTrigger,\n} from \"@/registry/new-york/ui/popover\";\nimport { cn } from \"@/lib/utils\";\nimport { CalendarIcon, XIcon } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { FieldValues, Path, UseFormReturn } from \"react-hook-form\";\nimport { RequiredField } from \"@/registry/new-york/form-controls/required-field\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { Calendar } from \"@/registry/new-york/ui/calendar\";\n\ntype Props<T extends FieldValues> = {\n   reactHookForm: UseFormReturn<T>;\n   name: Path<T>;\n   label?: string;\n   description?: string;\n   formItemClassName?: string;\n   formLabelClassName?: string;\n   formDescriptionClassName?: string;\n   className?: string;\n   allowInFuture?: boolean;\n   minDate?: Date;\n   maxDate?: Date;\n   disabled?: boolean;\n   allowClear?: boolean;\n   required?: boolean;\n   onChange?: (value: Date | null) => void;\n};\n\nconst formatDate = (date: Date) => {\n   return new Intl.DateTimeFormat(undefined, {\n      month: \"short\",\n      year: \"numeric\",\n      day: \"2-digit\",\n   }).format(date);\n};\n\nexport const DatePickerFormField = <T extends FieldValues>({\n   reactHookForm,\n   name,\n   label,\n   description,\n   formItemClassName,\n   formLabelClassName,\n   formDescriptionClassName,\n   className,\n   allowInFuture = true,\n   minDate = new Date(\"1900-01-01\"),\n   maxDate,\n   disabled = false,\n   allowClear = false,\n   required = false,\n   onChange,\n}: Props<T>) => {\n   const [isPopoverOpen, setIsPopoverOpen] = useState(false);\n\n   const isDateDisabled = (date: Date): boolean => {\n      const now = new Date();\n      if (!allowInFuture && date > now) {\n         return true;\n      }\n      if (minDate && date < minDate) {\n         return true;\n      }\n      if (maxDate && date > maxDate) {\n         return true;\n      }\n      return false;\n   };\n\n   return (\n      <FormField\n         name={name}\n         control={reactHookForm.control}\n         render={({ field }) => (\n            <FormItem className={formItemClassName}>\n               <div className=\"grid flex-1 gap-2\">\n                  {label && (\n                     <FormLabel className={formLabelClassName}>\n                        {label} {required && <RequiredField />}\n                     </FormLabel>\n                  )}\n                  <div className=\"w-full flex items-center gap-2 justify-between\">\n                     <Popover\n                        open={isPopoverOpen}\n                        onOpenChange={setIsPopoverOpen}\n                     >\n                        <PopoverTrigger asChild>\n                           <FormControl>\n                              <Button\n                                 disabled={disabled}\n                                 type=\"button\"\n                                 onClick={() => setIsPopoverOpen(true)}\n                                 className={cn(\n                                    \"pl-3 flex-1 text-left bg-transparent dark:bg-input/30  dark:hover:bg-input/40 text-foreground\",\n                                    !field.value && \"text-muted-foreground\",\n                                    className\n                                 )}\n                              >\n                                 {field.value ? (\n                                    formatDate(field.value)\n                                 ) : (\n                                    <span>Select a Date</span>\n                                 )}\n                                 <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                              </Button>\n                           </FormControl>\n                        </PopoverTrigger>\n                        <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                           <Calendar\n                              mode=\"single\"\n                              selected={field.value}\n                              defaultMonth={field.value}\n                              onSelect={(value) => {\n                                 field.onChange(value ?? null);\n                                 onChange?.(value ?? null);\n                                 setIsPopoverOpen(false);\n                              }}\n                              disabled={isDateDisabled}\n                              captionLayout=\"dropdown\"\n                           />\n                        </PopoverContent>\n                     </Popover>\n                     {allowClear && field.value && (\n                        <Button\n                           variant=\"ghost\"\n                           className=\"bg-transparent hover:bg-destructive!  rounded-full hover:text-white text-destructive size-6! shadow-none\"\n                           onClick={() => field.onChange(null)}\n                        >\n                           <XIcon className=\"size-4 \" />\n                        </Button>\n                     )}\n                  </div>\n               </div>\n               {description && (\n                  <FormDescription className={formDescriptionClassName}>\n                     {description}\n                  </FormDescription>\n               )}\n               <FormMessage />\n            </FormItem>\n         )}\n      />\n   );\n};\n",
      "type": "registry:component",
      "target": "components/form-controls/date-picker-form-field.tsx"
    },
    {
      "path": "registry/new-york/form-controls/checkbox-form-field.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport { RequiredField } from \"@/registry/new-york/form-controls/required-field\";\nimport { Checkbox } from \"@/registry/new-york/ui/checkbox\";\nimport {\n   FormControl,\n   FormDescription,\n   FormField,\n   FormItem,\n   FormLabel,\n   FormMessage,\n} from \"@/registry/new-york/ui/form\";\nimport React from \"react\";\nimport { FieldValues, Path, UseFormReturn } from \"react-hook-form\";\n\ntype Props<T extends FieldValues> = React.ComponentProps<typeof Checkbox> & {\n   reactHookForm: UseFormReturn<T>;\n   name: Path<T>;\n   label: string;\n   description?: string;\n   formItemClassName?: string;\n   formLabelClassName?: string;\n   formDescriptionClassName?: string;\n   formLabelValueContainerClassName?: string;\n   labelPosition?: \"left\" | \"right\" | \"top\" | \"bottom\";\n};\n\nexport const CheckboxFormField = <T extends FieldValues>({\n   reactHookForm,\n   name,\n   label,\n   formItemClassName,\n   formLabelClassName,\n   formDescriptionClassName,\n   formLabelValueContainerClassName,\n   description,\n   labelPosition = \"right\",\n   ...props\n}: Props<T>) => {\n   return (\n      <FormField\n         name={name}\n         control={reactHookForm.control}\n         render={({ field }) => (\n            <FormItem className={formItemClassName}>\n               <div\n                  className={cn(\n                     \"flex items-center gap-y-1 gap-x-2\",\n                     (labelPosition === \"top\" || labelPosition === \"bottom\") &&\n                        \"flex-col\",\n                     formLabelValueContainerClassName\n                  )}\n               >\n                  {(labelPosition === \"top\" || labelPosition === \"left\") && (\n                     <FormLabel className={formLabelClassName}>\n                        {label} {props.required && <RequiredField />}\n                     </FormLabel>\n                  )}\n                  <FormControl>\n                     <Checkbox\n                        {...field}\n                        {...props}\n                        checked={field.value ?? false}\n                        onCheckedChange={(checked) => {\n                           field.onChange(checked);\n                           props.onCheckedChange?.(checked);\n                        }}\n                     />\n                  </FormControl>\n                  {(labelPosition === \"bottom\" ||\n                     labelPosition === \"right\") && (\n                     <FormLabel className={formLabelClassName}>\n                        {label} {props.required && <RequiredField />}\n                     </FormLabel>\n                  )}\n               </div>\n               {description && (\n                  <FormDescription className={formDescriptionClassName}>\n                     {description}\n                  </FormDescription>\n               )}\n               <FormMessage />\n            </FormItem>\n         )}\n      />\n   );\n};\n",
      "type": "registry:component",
      "target": "components/form-controls/checkbox-form-field.tsx"
    },
    {
      "path": "registry/new-york/form-controls/textarea-form-field.tsx",
      "content": "import { RequiredField } from \"@/registry/new-york/form-controls/required-field\";\nimport {\n   FormControl,\n   FormDescription,\n   FormField,\n   FormItem,\n   FormLabel,\n   FormMessage,\n} from \"@/registry/new-york/ui/form\";\nimport { Textarea } from \"@/registry/new-york/ui/textarea\";\nimport React, { ChangeEvent } from \"react\";\nimport { FieldValues, Path, UseFormReturn } from \"react-hook-form\";\n\ntype Props<T extends FieldValues> = React.ComponentProps<\"textarea\"> & {\n   reactHookForm: UseFormReturn<T>;\n   name: Path<T>;\n   label?: string;\n   emptyToNull?: boolean;\n   formItemClassName?: string;\n   formLabelClassName?: string;\n   formDescriptionClassName?: string;\n   description?: string;\n};\n\nexport const TextareaFormField = <T extends FieldValues>({\n   reactHookForm,\n   name,\n   label,\n   formItemClassName,\n   formLabelClassName,\n   formDescriptionClassName,\n   emptyToNull = false,\n   description,\n   ...props\n}: Props<T>) => {\n   const handleOnChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n      const str = e.target.value;\n      if (emptyToNull && !str.trim()) {\n         return null;\n      }\n      return str;\n   };\n\n   return (\n      <FormField\n         name={name}\n         control={reactHookForm.control}\n         render={({ field }) => (\n            <FormItem className={formItemClassName}>\n               {label && (\n                  <FormLabel className={formLabelClassName}>\n                     {label} {props.required && <RequiredField />}\n                  </FormLabel>\n               )}\n               <FormControl>\n                  <Textarea\n                     {...field}\n                     {...props}\n                     value={field.value ?? \"\"}\n                     onChange={(e) => field.onChange(handleOnChange(e))}\n                  />\n               </FormControl>\n               {description && (\n                  <FormDescription className={formDescriptionClassName}>\n                     {description}\n                  </FormDescription>\n               )}\n               <FormMessage />\n            </FormItem>\n         )}\n      />\n   );\n};\n",
      "type": "registry:component",
      "target": "components/form-controls/textarea-form-field.tsx"
    },
    {
      "path": "registry/new-york/form-controls/number-input-form-field.tsx",
      "content": "import { RequiredField } from \"@/registry/new-york/form-controls/required-field\";\nimport { NumberInput } from \"@/registry/new-york/number-input/number-input\";\nimport {\n   FormControl,\n   FormDescription,\n   FormField,\n   FormItem,\n   FormLabel,\n   FormMessage,\n} from \"@/registry/new-york/ui/form\";\nimport React from \"react\";\nimport { FieldValues, Path, UseFormReturn } from \"react-hook-form\";\n\ntype Props<T extends FieldValues> = Omit<\n   React.ComponentProps<typeof NumberInput>,\n   \"value\" | \"onChange\"\n> & {\n   reactHookForm: UseFormReturn<T>;\n   name: Path<T>;\n   label?: string;\n   formItemClassName?: string;\n   formLabelClassName?: string;\n   formDescriptionClassName?: string;\n   description?: string;\n   onChange?: (value: number | null) => void;\n};\n\nexport const NumberInputFormField = <T extends FieldValues>({\n   reactHookForm,\n   name,\n   label,\n   formItemClassName,\n   formLabelClassName,\n   formDescriptionClassName,\n   description,\n   onChange,\n   ...props\n}: Props<T>) => {\n   return (\n      <FormField\n         name={name}\n         control={reactHookForm.control}\n         render={({ field }) => (\n            <FormItem className={formItemClassName}>\n               {label && (\n                  <FormLabel className={formLabelClassName}>\n                     {label} {props.required && <RequiredField />}\n                  </FormLabel>\n               )}\n               <FormControl>\n                  <NumberInput\n                     {...field}\n                     {...props}\n                     value={field.value}\n                     onChange={(value) => {\n                        field.onChange(value);\n                        onChange?.(value);\n                     }}\n                  />\n               </FormControl>\n               {description && (\n                  <FormDescription className={formDescriptionClassName}>\n                     {description}\n                  </FormDescription>\n               )}\n               <FormMessage />\n            </FormItem>\n         )}\n      />\n   );\n};\n",
      "type": "registry:component",
      "target": "components/form-controls/number-input-form-field.tsx"
    },
    {
      "path": "registry/new-york/form-controls/required-field.tsx",
      "content": "import { AsteriskIcon } from \"lucide-react\";\nimport React from \"react\";\n\nexport const RequiredField = () => {\n  return <AsteriskIcon className=\"text-destructive size-4 justify-self-end\" />;\n};\n",
      "type": "registry:component",
      "target": "components/form-controls/required-field.tsx"
    }
  ]
}